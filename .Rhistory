if(ph %%2 == 0){
decay_rate = 0.03
sel_coeff = 0.025
}else{
decay_rate = -0.03
sel_coeff = -0.01
}
if (i >= t_switch) {
if(ph %% 2 == 0) {
t_switch = t_switch + t_event
ph = ph + 1
}else{
t_switch = t_switch + t_pause
ph = ph + 1
}
}
# redefine the current population one generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2], decay_rate, sel_coeff, mut_rate)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
# condition to stop the simulation before t_max: either the population exceeds 1.5 times the original population size, or it goes extinct
if (pop_new[1]+pop_new[2]>=1.5*(N_init_a+ N_init_A) | pop_new[1]+pop_new[2]==0) break
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("WT","Mut")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used throughout
max_gen <- 2000
# create your simulation data
output <- simulate_pop(1000,0,0.35,0.01,0.005,max_gen)
# show the last few lines of the data table
print(output)
# plot the output - note that the plot range and the x axis have to be adjusted based on the length of the table
# determine x axis range
x_range <- 0:(length(output[,1])-1)
# this plots the total population size
plot(x_range,output[,1]+output[,2],type='l',ylim=c(0,max(output[,1]+output[,2])),xlab = "Generation",ylab = "Population size")
# add number of wild type individuals
lines(x_range,output[,1], col="blue")
# add number of mutant individuals
lines(x_range,output[,2], col="red")
t_pause = 2 #t_switch
t_event = 3
t_switch = t_pause
sel_coeff = 0.0
flooding_table <- c()
simulate_pop <- function(N_init_a, N_init_A, decay_rate, sel_coeff, mut_rate, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
ph = 0
# run the simulation until generation t_max
for (i in 1:t_max+1) {
if(ph %%2 == 0){
decay_rate = 0.03
sel_coeff = 0.025
}else{
decay_rate = -0.03
sel_coeff = -0.01
}
if (i >= t_switch) {
if(ph %% 2 == 0) {
t_switch = t_switch + t_event
ph = ph + 1
}else{
t_switch = t_switch + t_pause
ph = ph + 1
}
}
# redefine the current population one generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2], decay_rate, sel_coeff, mut_rate)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
# condition to stop the simulation before t_max: either the population exceeds 1.5 times the original population size, or it goes extinct
if (pop_new[1]+pop_new[2]>=1.5*(N_init_a+ N_init_A) | pop_new[1]+pop_new[2]==0) break
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("WT","Mut")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used throughout
max_gen <- 2000
# create your simulation data
output <- simulate_pop(1000,0,0.35,0.01,0.005,max_gen)
# show the last few lines of the data table
print(output)
# plot the output - note that the plot range and the x axis have to be adjusted based on the length of the table
# determine x axis range
x_range <- 0:(length(output[,1])-1)
# this plots the total population size
plot(x_range,output[,1]+output[,2],type='l',ylim=c(0,max(output[,1]+output[,2])),xlab = "Generation",ylab = "Population size")
# add number of wild type individuals
lines(x_range,output[,1], col="blue")
# add number of mutant individuals
lines(x_range,output[,2], col="red")
t_pause = 2 #t_switch
t_event = 2
t_switch = t_pause
sel_coeff = 0.0
flooding_table <- c()
simulate_pop <- function(N_init_a, N_init_A, decay_rate, sel_coeff, mut_rate, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
ph = 0
# run the simulation until generation t_max
for (i in 1:t_max+1) {
if(ph %%2 == 0){
decay_rate = 0.03
sel_coeff = 0.025
}else{
decay_rate = -0.03
sel_coeff = -0.01
}
if (i >= t_switch) {
if(ph %% 2 == 0) {
t_switch = t_switch + t_event
ph = ph + 1
}else{
t_switch = t_switch + t_pause
ph = ph + 1
}
}
# redefine the current population one generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2], decay_rate, sel_coeff, mut_rate)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
# condition to stop the simulation before t_max: either the population exceeds 1.5 times the original population size, or it goes extinct
if (pop_new[1]+pop_new[2]>=1.5*(N_init_a+ N_init_A) | pop_new[1]+pop_new[2]==0) break
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("WT","Mut")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used throughout
max_gen <- 2000
# create your simulation data
output <- simulate_pop(1000,0,0.35,0.01,0.005,max_gen)
# show the last few lines of the data table
print(output)
# plot the output - note that the plot range and the x axis have to be adjusted based on the length of the table
# determine x axis range
x_range <- 0:(length(output[,1])-1)
# this plots the total population size
plot(x_range,output[,1]+output[,2],type='l',ylim=c(0,max(output[,1]+output[,2])),xlab = "Generation",ylab = "Population size")
# add number of wild type individuals
lines(x_range,output[,1], col="blue")
# add number of mutant individuals
lines(x_range,output[,2], col="red")
t_pause = 8 #t_switch
t_event = 2
t_switch = t_pause
sel_coeff = 0.0
flooding_table <- c()
simulate_pop <- function(N_init_a, N_init_A, decay_rate, sel_coeff, mut_rate, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
ph = 0
# run the simulation until generation t_max
for (i in 1:t_max+1) {
if(ph %%2 == 0){
decay_rate = 0.03
sel_coeff = 0.025
}else{
decay_rate = -0.03
sel_coeff = -0.01
}
if (i >= t_switch) {
if(ph %% 2 == 0) {
t_switch = t_switch + t_event
ph = ph + 1
}else{
t_switch = t_switch + t_pause
ph = ph + 1
}
}
# redefine the current population one generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2], decay_rate, sel_coeff, mut_rate)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
# condition to stop the simulation before t_max: either the population exceeds 1.5 times the original population size, or it goes extinct
if (pop_new[1]+pop_new[2]>=1.5*(N_init_a+ N_init_A) | pop_new[1]+pop_new[2]==0) break
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("WT","Mut")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used throughout
max_gen <- 2000
# create your simulation data
output <- simulate_pop(1000,0,0.35,0.01,0.005,max_gen)
# show the last few lines of the data table
print(output)
# plot the output - note that the plot range and the x axis have to be adjusted based on the length of the table
# determine x axis range
x_range <- 0:(length(output[,1])-1)
# this plots the total population size
plot(x_range,output[,1]+output[,2],type='l',ylim=c(0,max(output[,1]+output[,2])),xlab = "Generation",ylab = "Population size")
# add number of wild type individuals
lines(x_range,output[,1], col="blue")
# add number of mutant individuals
lines(x_range,output[,2], col="red")
t_pause = 6 #t_switch
t_event = 2
t_switch = t_pause
sel_coeff = 0.0
flooding_table <- c()
simulate_pop <- function(N_init_a, N_init_A, decay_rate, sel_coeff, mut_rate, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
ph = 0
# run the simulation until generation t_max
for (i in 1:t_max+1) {
if(ph %%2 == 0){
decay_rate = 0.03
sel_coeff = 0.025
}else{
decay_rate = -0.03
sel_coeff = -0.01
}
if (i >= t_switch) {
if(ph %% 2 == 0) {
t_switch = t_switch + t_event
ph = ph + 1
}else{
t_switch = t_switch + t_pause
ph = ph + 1
}
}
# redefine the current population one generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2], decay_rate, sel_coeff, mut_rate)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
# condition to stop the simulation before t_max: either the population exceeds 1.5 times the original population size, or it goes extinct
if (pop_new[1]+pop_new[2]>=1.5*(N_init_a+ N_init_A) | pop_new[1]+pop_new[2]==0) break
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("WT","Mut")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used throughout
max_gen <- 2000
# create your simulation data
output <- simulate_pop(1000,0,0.35,0.01,0.005,max_gen)
# show the last few lines of the data table
print(output)
# plot the output - note that the plot range and the x axis have to be adjusted based on the length of the table
# determine x axis range
x_range <- 0:(length(output[,1])-1)
# this plots the total population size
plot(x_range,output[,1]+output[,2],type='l',ylim=c(0,max(output[,1]+output[,2])),xlab = "Generation",ylab = "Population size")
# add number of wild type individuals
lines(x_range,output[,1], col="blue")
# add number of mutant individuals
lines(x_range,output[,2], col="red")
t_pause = 2 #t_switch
t_event = 2
t_switch = t_pause
sel_coeff = 0.0
flooding_table <- c()
simulate_pop <- function(N_init_a, N_init_A, decay_rate, sel_coeff, mut_rate, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
ph = 0
# run the simulation until generation t_max
for (i in 1:t_max+1) {
if(ph %%2 == 0){
decay_rate = 0.03
sel_coeff = 0.025
}else{
decay_rate = -0.03
sel_coeff = -0.01
}
if (i >= t_switch) {
if(ph %% 2 == 0) {
t_switch = t_switch + t_event
ph = ph + 1
}else{
t_switch = t_switch + t_pause
ph = ph + 1
}
}
# redefine the current population one generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2], decay_rate, sel_coeff, mut_rate)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
# condition to stop the simulation before t_max: either the population exceeds 1.5 times the original population size, or it goes extinct
if (pop_new[1]+pop_new[2]>=1.5*(N_init_a+ N_init_A) | pop_new[1]+pop_new[2]==0) break
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("WT","Mut")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used throughout
max_gen <- 2000
# create your simulation data
output <- simulate_pop(1000,0,0.35,0.01,0.005,max_gen)
# show the last few lines of the data table
print(output)
# plot the output - note that the plot range and the x axis have to be adjusted based on the length of the table
# determine x axis range
x_range <- 0:(length(output[,1])-1)
# this plots the total population size
plot(x_range,output[,1]+output[,2],type='l',ylim=c(0,max(output[,1]+output[,2])),xlab = "Generation",ylab = "Population size")
# add number of wild type individuals
lines(x_range,output[,1], col="blue")
# add number of mutant individuals
lines(x_range,output[,2], col="red")
t_pause = 20 #t_switch
t_event = 2
t_switch = t_pause
sel_coeff = 0.0
flooding_table <- c()
simulate_pop <- function(N_init_a, N_init_A, decay_rate, sel_coeff, mut_rate, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
ph = 0
# run the simulation until generation t_max
for (i in 1:t_max+1) {
if(ph %%2 == 0){
decay_rate = 0.03
sel_coeff = 0.025
}else{
decay_rate = -0.03
sel_coeff = -0.01
}
if (i >= t_switch) {
if(ph %% 2 == 0) {
t_switch = t_switch + t_event
ph = ph + 1
}else{
t_switch = t_switch + t_pause
ph = ph + 1
}
}
# redefine the current population one generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2], decay_rate, sel_coeff, mut_rate)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
# condition to stop the simulation before t_max: either the population exceeds 1.5 times the original population size, or it goes extinct
if (pop_new[1]+pop_new[2]>=1.5*(N_init_a+ N_init_A) | pop_new[1]+pop_new[2]==0) break
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("WT","Mut")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used throughout
max_gen <- 2000
# create your simulation data
output <- simulate_pop(1000,0,0.35,0.01,0.005,max_gen)
# show the last few lines of the data table
print(output)
# plot the output - note that the plot range and the x axis have to be adjusted based on the length of the table
# determine x axis range
x_range <- 0:(length(output[,1])-1)
# this plots the total population size
plot(x_range,output[,1]+output[,2],type='l',ylim=c(0,max(output[,1]+output[,2])),xlab = "Generation",ylab = "Population size")
# add number of wild type individuals
lines(x_range,output[,1], col="blue")
# add number of mutant individuals
lines(x_range,output[,2], col="red")
t_pause = 10 #t_switch
t_event = 5
t_switch = t_pause
sel_coeff = 0.0
flooding_table <- c()
simulate_pop <- function(N_init_a, N_init_A, decay_rate, sel_coeff, mut_rate, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
ph = 0
# run the simulation until generation t_max
for (i in 1:t_max+1) {
if(ph %%2 == 0){
decay_rate = 0.03
sel_coeff = 0.025
}else{
decay_rate = -0.03
sel_coeff = -0.01
}
if (i >= t_switch) {
if(ph %% 2 == 0) {
t_switch = t_switch + t_event
ph = ph + 1
}else{
t_switch = t_switch + t_pause
ph = ph + 1
}
}
# redefine the current population one generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2], decay_rate, sel_coeff, mut_rate)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
# condition to stop the simulation before t_max: either the population exceeds 1.5 times the original population size, or it goes extinct
if (pop_new[1]+pop_new[2]>=1.5*(N_init_a+ N_init_A) | pop_new[1]+pop_new[2]==0) break
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("WT","Mut")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used throughout
max_gen <- 50
# create your simulation data
output <- simulate_pop(1000,0,0.35,0.01,0.005,max_gen)
# show the last few lines of the data table
print(output)
# plot the output - note that the plot range and the x axis have to be adjusted based on the length of the table
# determine x axis range
x_range <- 0:(length(output[,1])-1)
# this plots the total population size
plot(x_range,output[,1]+output[,2],type='l',ylim=c(0,max(output[,1]+output[,2])),xlab = "Generation",ylab = "Population size")
# add number of wild type individuals
lines(x_range,output[,1], col="blue")
# add number of mutant individuals
lines(x_range,output[,2], col="red")
t_pause = 10 #t_switch
t_event = 5
t_switch = t_pause
sel_coeff = 0.0
flooding_table <- c()
simulate_pop <- function(N_init_a, N_init_A, decay_rate, sel_coeff, mut_rate, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
ph = 0
# run the simulation until generation t_max
for (i in 1:t_max+1) {
if(ph %%2 == 0){
decay_rate = -0.03
sel_coeff = -0.025
}else{
decay_rate = 0.03
sel_coeff = 0.01
}
if (i >= t_switch) {
if(ph %% 2 == 0) {
t_switch = t_switch + t_event
ph = ph + 1
}else{
t_switch = t_switch + t_pause
ph = ph + 1
}
}
# redefine the current population one generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2], decay_rate, sel_coeff, mut_rate)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
# condition to stop the simulation before t_max: either the population exceeds 1.5 times the original population size, or it goes extinct
if (pop_new[1]+pop_new[2]>=1.5*(N_init_a+ N_init_A) | pop_new[1]+pop_new[2]==0) break
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("WT","Mut")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used throughout
max_gen <- 50
# create your simulation data
output <- simulate_pop(1000,0,0.35,0.01,0.005,max_gen)
# show the last few lines of the data table
print(output)
# plot the output - note that the plot range and the x axis have to be adjusted based on the length of the table
# determine x axis range
x_range <- 0:(length(output[,1])-1)
# this plots the total population size
plot(x_range,output[,1]+output[,2],type='l',ylim=c(0,max(output[,1]+output[,2])),xlab = "Generation",ylab = "Population size")
# add number of wild type individuals
lines(x_range,output[,1], col="blue")
# add number of mutant individuals
lines(x_range,output[,2], col="red")
4 %%2
0 %%2
3 %%2
